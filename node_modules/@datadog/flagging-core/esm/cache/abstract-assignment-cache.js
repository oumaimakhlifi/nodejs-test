import { getMD5Hash } from '../obfuscation';
/** Converts an {@link AssignmentCacheKey} to a string. */
export function assignmentCacheKeyToString(exposureEvent) {
    const key = {
        flag: {
            key: exposureEvent.flag.key,
        },
        subject: {
            id: exposureEvent.subject.id,
            attributes: exposureEvent.subject.attributes,
        },
    };
    return getMD5Hash(JSON.stringify(key));
}
/** Converts an {@link AssignmentCacheValue} to a string. */
export function assignmentCacheValueToString(cacheValue) {
    return getMD5Hash(JSON.stringify(cacheValue));
}
export class AbstractAssignmentCache {
    // key -> variation value hash
    constructor(delegate) {
        this.delegate = delegate;
    }
    init() {
        return Promise.resolve();
    }
    /** Returns whether the provided {@link AssignmentCacheEntry} is present in the cache. */
    has(entry) {
        return this.get(entry) === assignmentCacheValueToString(entry);
    }
    get(key) {
        return this.delegate.get(assignmentCacheKeyToString(key));
    }
    /**
     * Stores the provided {@link AssignmentCacheEntry} in the cache. If the key already exists, it
     * will be overwritten.
     */
    set(entry) {
        this.delegate.set(assignmentCacheKeyToString(entry), assignmentCacheValueToString(entry));
    }
    /**
     * Returns an array with all {@link AssignmentCacheEntry} entries in the cache as an array of
     * {@link string}s.
     */
    entries() {
        return this.delegate.entries();
    }
    /** Clears all entries from the cache. */
    clear() {
        this.delegate.clear();
    }
}
//# sourceMappingURL=abstract-assignment-cache.js.map