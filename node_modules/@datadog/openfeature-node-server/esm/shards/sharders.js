import { getMD5Hash } from '@datadog/flagging-core';
export class Sharder {
}
export class MD5Sharder extends Sharder {
    getShard(input, totalShards) {
        const hashOutput = getMD5Hash(input);
        // get the first 4 bytes of the md5 hex string and parse it using base 16
        // (8 hex characters represent 4 bytes, e.g. 0xffffffff represents the max 4-byte integer)
        const intFromHash = parseInt(hashOutput.slice(0, 8), 16);
        return intFromHash % totalShards;
    }
}
export class DeterministicSharder extends Sharder {
    constructor(lookup) {
        super();
        this.lookup = lookup;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getShard(input, _totalShards) {
        var _a;
        return (_a = this.lookup[input]) !== null && _a !== void 0 ? _a : 0;
    }
}
//# sourceMappingURL=sharders.js.map