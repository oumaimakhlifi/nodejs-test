import type { EvaluationContext, EvaluationContextValue } from '@openfeature/server-sdk';
export type ConditionValueType = EvaluationContextValue | EvaluationContextValue[];
export declare enum OperatorType {
    MATCHES = "MATCHES",
    NOT_MATCHES = "NOT_MATCHES",
    GTE = "GTE",
    GT = "GT",
    LTE = "LTE",
    LT = "LT",
    ONE_OF = "ONE_OF",
    NOT_ONE_OF = "NOT_ONE_OF",
    IS_NULL = "IS_NULL"
}
type NumericOperator = OperatorType.GTE | OperatorType.GT | OperatorType.LTE | OperatorType.LT;
type MatchesCondition = {
    operator: OperatorType.MATCHES;
    attribute: string;
    value: string;
};
type NotMatchesCondition = {
    operator: OperatorType.NOT_MATCHES;
    attribute: string;
    value: string;
};
type OneOfCondition = {
    operator: OperatorType.ONE_OF;
    attribute: string;
    value: string[];
};
type NotOneOfCondition = {
    operator: OperatorType.NOT_ONE_OF;
    attribute: string;
    value: string[];
};
type NumericCondition = {
    operator: NumericOperator;
    attribute: string;
    value: number;
};
type NullCondition = {
    operator: OperatorType.IS_NULL;
    attribute: string;
    value: boolean;
};
export type Condition = MatchesCondition | NotMatchesCondition | OneOfCondition | NotOneOfCondition | NumericCondition | NullCondition;
export interface Rule {
    conditions: Condition[];
}
export declare function matchesRule(rule: Rule, subjectAttributes: EvaluationContext): boolean;
export {};
//# sourceMappingURL=rules.d.ts.map